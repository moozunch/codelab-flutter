//main.dart without notes

import 'package:flutter/material.dart';
import 'package:english_words/english_words.dart'; //untuk ambil random english words wordpair
import 'package:provider/provider.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => MyAppState(),
      child: MaterialApp(
        title: 'flutter app annisa',
        theme: ThemeData(
          useMaterial3: true,
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.pink, secondary: Colors.purple),
        ),
        home: MyHomePage(),
      ),
    );
  }
}

class MyAppState extends ChangeNotifier { //class untuk state management atau status aplikasi
  var current = WordPair.random();
  void getNext(){
    current = WordPair.random();
    notifyListeners(); //notifyListeners untuk notify widget lain ada perubahan status
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    var appState = context.watch<MyAppState>(); //ambil status app dan notifikasi perubahan agar selalu uptodate
    var pair = appState.current; 

    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center, //sumbu axis (y)
          children: [
            Text('A random shit idea:'),
          SizedBox(height: 20),
        
        
        
            //button
            ElevatedButton(
              onPressed: (){
                appState.getNext(); //memanggil getNext method di class appState.
              },
              child: Text('Next'),
            ),
          ],
        ),
      ),
    );
  }
}

class bigCard extends StatelessWidget {
  const bigCard({
    super.key,
    required this.pair,
  });

  final WordPair pair;

  @override
  Widget build(BuildContext context) {

    final theme = Theme.of(context); //diatur di MyApp
    final style = theme.textTheme.displayMedium!.copyWith( color: theme.colorScheme.onPrimary,
    );

    return Card(
      elevation: 2,
      color: theme.colorScheme.primary,
       child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Text(
          pair.asLowerCase,
          style: style,
          semanticsLabel: "${pair.first} ${pair.second}", 
        ),       
       ),    
    );
  }
}